#################################################################################################################################################################
# Remarks:     Custom Logs export verison. This version requests user input for a given Log Analytic table name. It queries the LA table based on specified time period.  
#              Name of event hub topic is derived from the user input Log Analytics table name (suffix 'am-' is added to lower case table name provided by the user).
#              A Rest API call is made and the output from the LA query is submitted to event hub.
#              Row by row is iterated and size is calculated for a group of rows before submission to Event Hub. 
# 
# Constraints: Event hub can process maximum 1MB per message or 1000 events per second at this time. Log Analytics query can return max 500K rows or 64MB. However
#              the event hub constraints are expected to be more prominent.
#
# Hardcoded $LogAnalyticsWorkspaceId and AccessPolicyName/Key
# 
###################################################################################################################################################################

# intall AZ.operationalinsights visit link "https://www.powershellgallery.com/packages/Az.OperationalInsights/2.3.0"
#verify installation from Automation account - > Select account - > Modules (on left pane) - > search the name operationalinsights

PARAM(   
           
    [Parameter(Mandatory=$false)] $AccessPolicyName="RootManageSharedAccessKey",
    [Parameter(Mandatory=$false)] $Access_Policy_Key="ArVc/hr7t+N89dQL+E9j3wQfxkY2T9txcIMBcjbHiHE=", #PROD ecy
    [Parameter(Mandatory=$false)] $EventHubNamespace="ECY-HUB-Namespace01",
    [Parameter(Mandatory=$false)] $LogAnalyticsWorkspaceId = "5dd67a86-09ea-4310-bf07-99c209a19ec1",
    [Parameter(Mandatory=$true)] $startperiod, 
    [Parameter(Mandatory=$true)] $endperiod,
    [Parameter(Mandatory=$true)] $TableName
    
)

function get-SAStoken{

    Param(
        $EventHubNamespace,
        $EventHub,
        $Access_Policy_Name,
        $Access_Policy_Key
    )
    
    [Reflection.Assembly]::LoadWithPartialName("System.Web")| out-null
    $URI="$($EventHubNamespace).servicebus.windows.net/$($EventHub)"
    #Token expires now+3000000
    $Expires=([DateTimeOffset]::Now.ToUnixTimeSeconds())+3000000
    $SignatureString=[System.Web.HttpUtility]::UrlEncode($URI)+ "`n" + [string]$Expires
    $HMAC = New-Object System.Security.Cryptography.HMACSHA256
    $HMAC.key = [Text.Encoding]::ASCII.GetBytes($Access_Policy_Key)
    $Signature = $HMAC.ComputeHash([Text.Encoding]::ASCII.GetBytes($SignatureString))
    $Signature = [Convert]::ToBase64String($Signature)
    $SASToken = "SharedAccessSignature sr=" + [System.Web.HttpUtility]::UrlEncode($URI) + "&sig=" + [System.Web.HttpUtility]::UrlEncode($Signature) + "&se=" + $Expires + "&skn=" + $Access_Policy_Name
    
    return $SASToken

}

function SendDataToEventHub{
    PARAM(
    $token,
    $row,
    $Namespace,
    $EventHub
    )
    
    $body_compose =  $row -join "," 
    $body_compose = "[" + $body_compose + "]"

   
    #Write-Output "Calling Rest API to send data to event hub topic $EventHub..."
    $paras_DE = @{
   
    Uri = "https://$($Namespace).servicebus.windows.net/$($EventHub)/messages?api-version=2014-01"

    ContentType = 'application/json'
    Method = 'POST'
    headers = @{
        authorization = $token
        
    }

    body = $body_compose
           
    }
    
    Try 
    {
        
        $result = Invoke-RestMethod @paras_DE
        #Write-Output $result "--------- Data sent to Event Hub $EventHub."

    } 
    Catch
    {
        Write-Error "!!! Error during REST API send operation. !!! "
        Write-Error "Error : $_.ErrorDetails.Message"
        Write-Error "Command : $_.InvocationInfo.Line"
        $ERRORCOUNT++
        return $false  
    }
    return $true
}

function QueryLogAnalyticsSend {  
        Param(
        $TableName, 
        $startperiod, 
        $endperiod, 
        $LogAnalyticsWorkspaceId
        )
        
        $makehub = $TableName.ToLower() 
        $EventHub = $makehub.Substring(0,$makehub.Length-3)
        $elapsedvar1 = Get-Date
        
        $query = "$($TableName)| where TimeGenerated >= datetime($startperiod) and TimeGenerated <= datetime($endperiod)"
        
        Try {

            $output = (Invoke-AzOperationalInsightsQuery -WorkspaceId $LogAnalyticsWorkspaceId -Query $query).Results
        }

        Catch {
            Write-Error "Error during Invoke-AzOperationalInsightsQuery. Verify 1) PowerShell Module Az is installed 2) LA Work ID is correct 3) DateTime syntax is correct. "
            Write-Error "Error : $_.ErrorDetails.Message"
            Write-Error "Command : $_.InvocationInfo.Line"
            Write-Error "Reconsider resending this $query"
            return $false
        }
        $arrayrows = @()
        $total_size_sent = 0
        $current_size = 0
        $allowed_size = 1024 * 1024 - 7000
        $converted_output = $output | ConvertTo-Json
        IF ( ($null -eq $converted_output) -or (@($converted_output).count -lt 0)) 
        {   
            Write-Warning "No data for this query... no action needed."
            return $false
        }
    
        $checkoutputsize =  [System.Text.Encoding]::UTF8.GetByteCount($converted_output)
                
        $SAStoken = get-SAStoken -EventHubNamespace $EventHubNamespace -EventHub $EventHub -Access_Policy_Name $AccessPolicyName -Access_Policy_Key $Access_Policy_Key
                            
        IF ($checkoutputsize -gt 0)  
        {
            foreach ($row in $output) 
            {
                
                $irow++
                $converted_row = $row | ConvertTo-Json
                $row_size = [System.Text.Encoding]::UTF8.GetByteCount($converted_row)
                $current_size = $current_size+$row_size

                IF ($row_size -ge $allowed_size) 
                {
                    throw "Investigate row size $row_size"
                }
            
                IF ($current_size -ge $allowed_size) 
                {
                                        
                    $status = SendDataToEventHub -token $SAStoken -row $arrayrows -Namespace $EventHubNamespace -EventHub $EventHub
                    $ROWTOTAL = $ROWTOTAL + $irow
                    IF ($status) 
                    {
                           Write-Warning "*** Sent to Event hub: $current_size Bytes   Table is: $TableName RowTotal:$ROWTOTAL" 
                    }
                        
                    $total_size_sent = $total_size_sent + $current_size
                    $current_size = $row_size # Changed from 0 to $row_size to capture size of row left unsent.
                    $arrayrows = @()
                                            
                }

                $arrayrows = $arrayrows + $converted_row

            }

            #In case the total row size are left over from the condition IF($current_size -gt $allowed_size)
            #LEFT OVER SECTION
            IF ($arrayrows.Count -gt 0) 
            {
                               
                $total_size_sent = $current_size
                $status = SendDataToEventHub -token $SAStoken -row $arrayrows -Namespace $EventHubNamespace -EventHub $EventHub
                IF ($status)
                { 
                    #Write-Warning "*** Sent to Event hub: $current_size Bytes   Table is: $TableName Row#:$irow"
                } 
              
            }
        } 
        else 
        {
            Write-Warning "** Size is 0 bytes. Do not send it."
        }  
        Write-Warning "==================Total Rows sent:$ROWTOTAL   Total size:$total_size_sent "
        return $true        
}
<##############
      MAIN()
###############>
$tenant = "11d0e217-264e-400a-8ba0-57dcc127d72d"
$subscription = "f26bf361-d158-4a17-8590-0fd9917def20"

Connect-AzAccount -Identity 
$AzureContext = Set-AzContext -SubscriptionId $subscription

$StartDate = Get-Date $startperiod
$EndDate =   Get-Date $endperiod
$currentDate = $StartDate

$MinuteInterval = 2
$iloop = 0
$i = 0
#Iterate in small period increments to avoid timeouts and max query size limits against Log Analytics:

    DO
      {
        IF ($iloop -gt 0) 
        {        
            $StartDateString = $currentDate.ToString("yyyy-MM-dd HH:mm:ss.ffffff")+"1"

        } else {

            $StartDateString = $currentDate.ToString("yyyy-MM-dd HH:mm:ss.ffffff")
        }
        $currentDate = $currentDate.AddMinutes($MinuteInterval)
        
        IF ($currentDate -gt $EndDate) 
        {
            $currentDate = $EndDate
        }
        $EndDateString = $currentDate.ToString("yyyy-MM-dd HH:mm:ss.ffffff")
        
        $LAstart = $StartDateString
        $LAend   = $EndDateString 
                       
        $status = QueryLogAnalyticsSend -TableName $TableName -startperiod  $LAstart -endperiod $LAend -LogAnalyticsWorkspaceId $LogAnalyticsWorkspaceId
        IF ($status)
        {
            #Write-Warning "Success..."
        }
     
        $iloop++
                     
     } While ($currentDate -ne $EndDate)

Write-Host "** Normal end"
